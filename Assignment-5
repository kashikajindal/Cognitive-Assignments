# Q.1 For the array gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]'), Find
import numpy as np
gfg = np.matrix('[4,1,9;12,3,1;4,5,6]')

# i. Sum of all elements
print(np.sum(gfg))

# ii. Sum of all elements row-wise
print(np.sum(gfg,axis = 1))

# iii. Sum of all elements column-wise
print(np.sum(gfg,axis = 0))




# Q.2 (a)For the array: array = np.array([10, 52, 62, 16, 16, 54, 453]), find
import numpy as np
array1 = np.array([10, 52, 62, 16, 16, 54, 453])

# i. Sorted array
sorted_array = np.sort(array1)
print(sorted_array)

# ii. Indices of sorted array
sorted_indices = np.argsort(array1)
print(sorted_indices)

# iii. 4 smallest elements
smallest_4 = sorted_array[:4]
print(smallest_4)

# iv. 5 largest elements
largest_5 = sorted_array[-5:]
print(largest_5)

#  (b) For the array: array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0]), find
array2 = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])

# i. Integer elements only
integer_element = array2[array2 % 1 == 0]
print(integer_element)

# ii. Float elements only 
float_element = array2[array2 % 1 != 0]
print(float_element)




# Q.3 You are given a weekly sales dataset and need to perform various operations using NumPy broadcasting.
# a) Generate your unique sales dataset:
#   Take the sum of the ASCII values of the initials of your first and last name. Call this value X. (If your initials are A B → ASCII sum = 65 + 66 = 131 → sales = [131, 181, 231, 281, 331].)
#   Create a NumPy array sales with values [X, X+50, X+100, X+150, X+200].
import numpy as np
def sales_data(first_initial,second_initial):
    X = (ord(first_initial))+(ord(second_initial))
    sales = np.array([X,X+50,X+100,X+150,X+200])
    return sales,X

first_initial = "A"
second_initial = "B"
sales,X = sales_data(first_initial,second_initial)
print("Sales : ",sales)
print("X value : ",X)

# b) Compute your personalized tax rate as ((X % 5) + 5) / 100.
#   Use broadcasting to apply this tax rate to each sales value.
tax_rate = ((X % 5) + 5) / 100
res = sales * (1 + tax_rate)
print(res)

# c) Adjust sales based on discount:
#   If sales < X+100, apply a 5% discount.
#   If sales >= X+100, apply a 10% discount.
discount = np.where(sales < X + 100, res * (1 - 0.05), res * (1 - 0.10))
print(discount)

# d) Expand sales data for multiple weeks:
#   Create a 3×5 matrix representing three weeks of sales by stacking sales three times using broadcasting.
weekly_sales = np.tile(discount, (3, 1))
print(weekly_sales)
#   Increase sales by 2% per week using element-wise broadcasting. 
week = np.arange(1,4).reshape(3,1)
weekly_inc = weekly_sales*(1.02 ** week)
print(weekly_inc)





# Q4. Generate x values using np.linspace() from -10 to 10 with 100 points. Use each function from the list below and compute y values using NumPy:
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-10, 10, 100)
#   Y = x2
y1 = x**2
plt.figure(figsize=(8, 6)) 
plt.plot(x, y1)
plt.title("Y = X^2")
plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)
plt.show()
#   Y = sin(x)
y2 = np.sin(x)
plt.figure(figsize=(8, 6)) 
plt.plot(x, y2)
plt.title("Y = sin(X)")
plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)
plt.show()
#   Y = ex
y3 = np.exp(x)
plt.figure(figsize=(8, 6)) 
plt.plot(x, y3)
plt.title("Y = e^X")
plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)
plt.show()
#   Y = log(|x| + 1)
y4 = np.log(np.abs(x) + 1) 
plt.figure(figsize=(8, 6))
plt.plot(x, y4)
plt.title("Y = log(|x| + 1)")
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True)
plt.show()
